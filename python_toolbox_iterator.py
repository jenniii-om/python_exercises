"""
You are provided with a list of strings flash. 
You will practice iterating over the list by using a for loop. 
You will also create an iterator for the list and access the values from the iterator.
"""

# Create a list of strings: flash
flash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']

# Print each list item in flash using a for loop
for person in flash:
    print(person)

# Create an iterator for flash: superhero
superhero = iter(flash)

# Print each item from the iterator
print(next(superhero))
print(next(superhero))
print(next(superhero))
print(next(superhero))



############################################################################################

"""
Iterating over iterables (2)
One of the things you learned about in this chapter is that not all iterables are actual lists. 
A couple of examples that we looked at are strings and the use of the range() function. 
In this exercise, we will focus on the range() function.

You can use range() in a for loop as if it's a list to be iterated over:
for i in range(5):
    print(i)
"""

# Create an iterator for range(3): small_value
small_value = iter(range(3))

# Print the values in small_value
print(next(small_value))
print(next(small_value))
print(next(small_value))

# Loop over range(3) and print the values
for num in range(3):
    print(num)


# Create an iterator for range(10 ** 100): googol
googol = iter(range(10 ** 100))

# Print the first 5 values from googol
print(next(googol))
print(next(googol))
print(next(googol))
print(next(googol))
print(next(googol))


############################################################################################

"""
Iterators as function arguments

You've been using the iter() function to get an iterator object, 
as well as the next() function to retrieve the values one by one from the iterator object.

There are also functions that take iterators and iterables as arguments. 
For example, the list() and sum() functions return a list and the sum of elements, respectively.

In this exercise, you will use these functions by passing an iterable from range() and then printing the results of the function calls.

"""

# Create a range object: values
values = range(10,21)

# Print the range object
print(values)

# Create a list of integers: values_list
values_list = list(values)

# Print values_list
print(values_list)

# Get the sum of values: values_sum
values_sum = sum(values_list)

# Print values_sum
print(values_sum)



############################################################################################

"""
Using enumerate()

In this exercise, you are given a list of strings mutants and you will practice using enumerate() on it 
by printing out a list of tuples and unpacking the tuples using a for loop.

"""

# Create a list of strings: mutants
mutants = ['charles xavier', 
            'bobby drake', 
            'kurt wagner', 
            'max eisenhardt', 
            'kitty pryde']

# Create a list of tuples: mutant_list
mutant_list = list(enumerate(mutants))

# Print the list of tuples
print(mutant_list)

# Unpack and print the tuple pairs
for index1, value1 in enumerate(mutants):
    print(index1, value1)

# Change the start index
for index2, value2 in enumerate(mutants, start=1):
    print(index2, value2)


############################################################################################

"""
Using zip

Three lists of strings are pre-loaded: mutants, aliases, and powers. 

First, you will use list() and zip() on these lists to generate a list of tuples. 
Then, you will create a zip object using zip(). 
Finally, you will unpack this zip object in a for loop to print the values in each tuple. 

Observe the different output generated by printing the list of tuples, then the zip object, and finally, the tuple values in the for loop.

"""

mutants = ['charles xavier', 'bobby drake', 'kurt wagner', 'max eisenhardt', 'kitty pryde']
aliases = ['prof x', 'iceman', 'nightcrawler', 'magneto', 'shadowcat']
powers = ['telepathy', 'thermokinesis', 'teleportation', 'magnetokinesis', 'intangibility']

# Create a list of tuples: mutant_data
mutant_data = list(zip(mutants, aliases, powers))

# Print the list of tuples
print(mutant_data)

# Create a zip object using the three lists: mutant_zip
mutant_zip = zip(mutants, aliases, powers)

# Print the zip object
print(mutant_zip)

# Unpack the zip object and print the tuple values
for value1, value2, value3 in mutant_zip:
    print(value1, value2, value3)


############################################################################################

"""
Using * and zip to 'unzip'

Let's play around with zip() a little more. There is no unzip function for doing the reverse of what zip() does.
We can, however, reverse what has been zipped together by using zip() with a little help from *! 
* unpacks an iterable such as a list or a tuple into positional arguments in a function call.

In this exercise, you will use * in a call to zip() to unpack the tuples produced by zip().

Two tuples of strings, mutants and powers have been pre-loaded.

"""

mutants = ('charles xavier', 'bobby drake', 'kurt wagner', 'max eisenhardt', 'kitty pryde')
powers = ('telepathy', 'thermokinesis', 'teleportation', 'magnetokinesis', 'intangibility')

# Create a zip object from mutants and powers: z1
z1 = zip(mutants, powers)

# Print the tuples in z1 by unpacking with *
print(*z1)

# Re-create a zip object from mutants and powers: z1
z1 = zip(mutants, powers)

# 'Unzip' the tuples in z1 by unpacking with * and zip(): result1, result2
result1, result2 = zip(*z1)

# Check if unpacked tuples are equivalent to original tuples
print(result1 == mutants)
print(result2 == powers)



############################################################################################

"""
Using iterators to load large files into memory: Chunks

Processing large amounts of Twitter data

You will process a large csv file of Twitter data, 'csv_files/tweets.csv' but this time, working on it in chunks of 10 entries at a time.

"""

import pandas as pd

# Initialize an empty dictionary: counts_dict
counts_dict = {}

# Iterate over the file chunk by chunk
# Iterate over the 'tweets.csv' file by using a for loop. 
# Use the loop variable chunk and iterate over the call to pd.read_csv() with a chunksize of 10.
for chunk in pd.read_csv('csv_files/tweets.csv', chunksize=10):

    # Iterate over the column in DataFrame
    # In the inner loop, iterate over the column 'lang' in chunk by using a for loop. Use the loop variable entry.
    for entry in chunk['lang']:
        if entry in counts_dict.keys():
            counts_dict[entry] += 1
        else:
            counts_dict[entry] = 1

# Print the populated dictionary
print(counts_dict)


############################################################################################

"""
Extracting information for large aamounts of Twitter data

It's good to know how to process a file in smaller, more manageable chunks, 
but it can become very tedious having to write and rewrite the same code for the same task each time. 
In this exercise, you will be making your code more reusable by putting your work in the last exercise in a function definition.

Instructions:
1)  Define the function count_entries(), which has 3 parameters. 
    The first parameter is csv_file for the filename, the second is c_size for the chunk size, and the last is colname for the column name.

2)  Iterate over the file in csv_file file by using a for loop.
    Use the loop variable chunk and iterate over the call to pd.read_csv(), passing c_size to chunksize.

3)  In the inner loop, iterate over the column given by colname in chunk by using a for loop. Use the loop variable entry.

4)  Call the count_entries() function by passing to it the filename 'tweets.csv', the size of chunks 10, 
    and the name of the column to count, 'lang'. Assign the result of the call to the variable result_counts.

"""

# Define count_entries()
def count_entries(csv_file, c_size, colname):
    """Return a dictionary with counts of
    occurrences as value for each key."""
    
    # Initialize an empty dictionary: counts_dict
    counts_dict = {}

    # Iterate over the file chunk by chunk
    for chunk in pd.read_csv(csv_file, chunksize=c_size):

        # Iterate over the column in DataFrame
        for entry in chunk[colname]:
            if entry in counts_dict.keys():
                counts_dict[entry] += 1
            else:
                counts_dict[entry] = 1

    # Return counts_dict
    return counts_dict

# Call count_entries(): result_counts
result_counts = count_entries('csv_files/tweets.csv', 10, 'lang')

# Print result_counts
print(result_counts)
